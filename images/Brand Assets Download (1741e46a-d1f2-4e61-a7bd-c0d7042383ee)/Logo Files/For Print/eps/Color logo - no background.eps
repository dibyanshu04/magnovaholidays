%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.59.0 (https://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2370 761
%%HiResBoundingBox: 0 0 2370 760.07996
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2370 760.07996 re
W
q
[0.24 0 0 -0.24 0 760.07996] cm
q
0 0 9875 3165.625 re
W*
q
[33.865704 0 0 33.875011 -0.684731 -200.48596] cm
q
55.896 13.291 m
37.917 13.291 22.925999 26.287001 19.797001 43.375999 c
9.693 52.243 5.467 60.501999 8.216 66.067001 c
10.134999 69.951004 15.143 71.904999 22.269001 71.904999 c
23.544001 71.904999 24.906002 71.823997 26.312 71.698997 c
33 80.792999 43.767998 86.709 55.896999 86.709 c
76.138 86.709 92.606003 70.240997 92.606003 50 c
92.606003 29.759003 76.138 13.291 55.896 13.291 c
h
81.500999 26.594 m
78.917999 27.694 75.954002 28.615999 72.693001 29.323 c
70.522003 23.534 67.461998 18.982 63.876999 16.227001 c
70.766998 17.855 76.872002 21.535 81.500999 26.594 c
h
56.824001 15.341 m
62.429001 15.896 67.483002 21.448 70.674004 29.731998 c
66.375 30.525999 61.670006 30.967999 56.824005 31.018999 c
56.824005 15.341 l
56.824001 15.341 l
h
47.993999 16.209 m
44.392998 18.976999 41.319 23.559 39.136002 29.335999 c
35.862003 28.627998 32.888 27.697998 30.293001 26.592999 c
34.938 21.516001 41.071999 17.827999 47.993999 16.209 c
h
54.824001 15.356 m
54.824001 31.015999 l
50.002003 30.957998 45.330002 30.514999 41.063004 29.724998 c
44.192001 21.507 49.166 15.98 54.824001 15.356 c
h
21.231001 48.250999 m
21.610001 40.668999 24.436001 33.724998 28.928001 28.181999 c
31.700001 29.418999 34.917 30.451 38.465 31.231998 c
36.806 36.257999 35.790001 42.055 35.627998 48.251999 c
21.231001 48.251999 l
21.231001 48.250999 l
h
38.042 67.476997 m
34.175999 68.507996 30.541 69.208 27.249001 69.57 c
23.473 64.058998 21.245001 57.41 21.193001 50.251999 c
35.607002 50.251999 l
35.631001 56.480999 36.509998 62.345001 38.042 67.476997 c
h
10.009 65.181 m
7.91 60.932999 11.482 53.890999 19.361 46.476997 c
19.25 47.636997 19.188 48.811996 19.188 49.999996 c
19.188 57.273994 21.323999 64.054993 24.987999 69.765999 c
17.278 70.268997 11.769 68.742996 10.009 65.181 c
h
28.632999 71.441002 m
31.730999 71.035004 35.084999 70.353004 38.656998 69.387001 c
40.838997 75.744003 44.064999 80.802002 47.921997 83.774002 c
40.167999 81.943001 33.414001 77.508003 28.632999 71.441002 c
h
56.824001 84.685997 m
56.824001 76.584 l
56.479 77.029999 56.042 77.408997 55.525002 77.681 c
54.824001 78.050003 l
54.824001 84.639 l
48.916 83.963997 43.712002 77.769997 40.611 68.834 c
41.691002 68.517998 42.786999 68.178001 43.900002 67.812996 c
44.341003 68.652992 l
44.517002 68.986992 44.862003 69.186989 45.226002 69.186989 c
45.307003 69.186989 45.389 69.176987 45.471001 69.15699 c
47.906002 68.541992 l
51.469002 75.297989 l
51.649002 75.637985 51.995003 75.830986 52.355003 75.830986 c
52.512005 75.830986 52.671005 75.793983 52.820004 75.715988 c
54.128002 75.027985 l
54.455002 74.855988 54.660004 74.516983 54.662003 74.146988 c
54.693001 66.812988 l
55.518002 66.57399 56.263 66.275986 57.045002 65.86499 c
60.027 64.29599 l
63.417 80.277992 l
63.481998 80.584991 63.688 80.842995 63.971001 80.97599 c
64.106003 81.038994 64.250999 81.070992 64.396004 81.070992 c
64.556007 81.070992 64.716003 81.03299 64.862007 80.955994 c
68.925011 78.816994 l
69.216011 78.663994 69.41201 78.37899 69.452011 78.050995 c
71.860008 58.068993 l
75.39801 56.206993 l
76.60701 55.570992 77.960007 54.240993 79.016006 52.649994 c
79.865005 51.371994 80.747009 49.603992 80.132004 48.436993 c
79.493004 47.223991 77.553001 46.968994 76.037003 46.968994 c
74.516006 46.968994 72.362999 47.245995 70.881004 48.026993 c
67.511002 49.799999 l
49.676003 40.467999 l
49.385002 40.315998 49.037003 40.315998 48.746002 40.468998 c
44.683002 42.606998 l
44.406002 42.752998 44.213001 43.019997 44.162003 43.328999 c
44.110004 43.639 44.208004 43.953999 44.424004 44.181 c
55.678001 56.028 l
52.696003 57.597 l
51.902004 58.014999 51.226002 58.467999 50.550003 59.025002 c
44.560005 54.947002 l
44.255005 54.739002 43.859005 54.717003 43.533005 54.887001 c
42.224007 55.575001 l
41.735008 55.832001 41.546005 56.436001 41.803005 56.926003 c
45.315006 63.614002 l
43.428005 65.272003 l
43.218006 65.457001 43.115005 65.715004 43.103004 65.981003 c
42.056004 66.320999 41.022003 66.639 40.002003 66.935005 c
38.504002 61.960007 37.632004 56.261005 37.608002 50.253006 c
46.053001 50.253006 l
44.153 48.253006 l
37.628998 48.253006 l
37.788998 42.170006 38.780998 36.498005 40.388996 31.630007 c
44.865997 32.481007 49.768997 32.959007 54.825996 33.019009 c
54.825996 39.778008 l
56.825996 40.825008 l
56.825996 33.021008 l
61.909996 32.968006 66.850998 32.490009 71.362999 31.635008 c
72.613998 35.375008 73.497002 39.594009 73.914001 44.10701 c
74.57 44.026009 75.239998 43.979012 75.912003 43.97401 c
75.494003 39.358009 74.612999 35.057011 73.359001 31.22401 c
76.895004 30.44401 80.109001 29.41901 82.869003 28.189011 c
87.360001 33.730011 90.185005 40.673012 90.563004 48.25301 c
83.213005 48.25301 l
83.351006 48.883011 83.374008 49.548012 83.262009 50.25301 c
90.599998 50.25301 l
90.539001 58.69701 87.446999 66.431007 82.361 72.425011 c
79.774002 71.319008 76.780998 70.367012 73.488998 69.632011 c
73.249001 71.625015 l
76.077003 72.267014 78.667 73.069016 80.944 73.993011 c
74.820999 80.379997 66.291 84.435997 56.824001 84.685997 c
h
57.516998 55.058998 m
46.784 43.761002 l
49.213001 42.483002 l
65.359001 50.932003 l
57.516998 55.058998 l
h
71.813004 49.794998 m
72.753006 49.300999 74.452003 48.967999 76.038002 48.967999 c
77.398003 48.967999 78.137001 49.215 78.343002 49.363998 c
78.369003 50.266998 76.395004 53.422997 74.467003 54.435997 c
70.470001 56.539997 l
70.468002 56.540997 70.466003 56.540997 70.464005 56.541996 c
60.266006 61.908997 l
60.265007 61.908997 60.265007 61.909996 60.264008 61.909996 c
56.114006 64.094994 l
55.323006 64.511993 54.612007 64.782997 53.739006 65.004997 c
46.047005 66.948997 l
45.693005 65.940994 l
51.531006 60.808994 l
52.208008 60.213993 52.835007 59.782993 53.627007 59.366993 c
71.813004 49.794998 l
h
69.709 59.199001 m
67.528999 77.290001 l
65.098999 78.568001 l
61.867001 63.325001 l
69.709 59.199001 l
h
52.691002 67.332001 m
52.666 73.276001 l
49.902 68.037003 l
52.691002 67.332001 l
h
46.859001 62.251999 m
44.144001 57.082001 l
48.987999 60.380001 l
46.859001 62.251999 l
h
W
[85.211183 0 0 73.418005 7.394822 13.290997] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0.022624 def
/yMin 0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.176 mul 0.176 add
1 index 1 exp 0.462 mul 0.22 add
2 index 1 exp 0.396 mul 0.541 add
4 3 roll pop 
}
def
-0.022624 1 0 axialSH
Q
Q
q
[47.628197 0 0 47.641289 3742.2188 1069.09595] cm
/DeviceRGB {} CS
[0.0745 0.4902 0.7725] SC
/DeviceRGB {} cs
[0.0745 0.4902 0.7725] sc
3.42 13.16 m
3.42 20 l
0.6 20 l
0.6 5.5 l
3.66 5.5 l
5.24 11.62 l
6.82 5.5 l
9.9 5.5 l
9.9 20 l
7.08 20 l
7.08 13.16 l
5.24 18.959999 l
3.42 13.16 l
h
13.88 18.200001 m
13.62 20 l
10.7 20 l
13.32 5.5 l
16.42 5.5 l
19.040001 20 l
16.120001 20 l
15.860001 18.200001 l
13.880001 18.200001 l
13.88 18.200001 l
h
14.2 15.9 m
15.54 15.9 l
14.88 10.76 l
14.2 15.9 l
h
19.700001 7.26 m
19.700001 6.72666 19.84334 6.3 20.130001 5.980001 c
20.416662 5.660001 20.846661 5.500001 21.420002 5.500001 c
25.560001 5.500001 l
26.060001 8.200001 l
22.880001 8.200001 l
22.706661 8.200001 22.620001 8.293341 22.620001 8.480001 c
22.620001 17.080002 l
22.620001 17.266663 22.706661 17.360003 22.880001 17.360003 c
24.200001 17.360003 l
24.200001 11.640003 l
27.02 11.640003 l
27.02 20.000004 l
21.960001 20.000004 l
21.120001 20.000004 20.5333 19.826664 20.200001 19.480003 c
19.866701 19.133343 19.700001 18.560003 19.700001 17.760004 c
19.700001 7.260004 l
19.700001 7.26 l
h
28.16 5.5 m
30.92 5.5 l
32.400002 11.32 l
32.400002 5.5 l
35.380001 5.5 l
35.380001 20 l
32.400002 20 l
30.840002 13.940001 l
30.840002 20 l
28.160002 20 l
28.160002 5.5 l
28.16 5.5 l
h
39.759998 8.04 m
39.586658 8.04 39.5 8.13334 39.5 8.32 c
39.5 17.16 l
39.5 17.266661 39.516659 17.343319 39.549999 17.38998 c
39.58334 17.436642 39.66 17.45998 39.779999 17.45998 c
40.879997 17.45998 l
40.999996 17.45998 41.076656 17.43664 41.109997 17.38998 c
41.143337 17.343321 41.159996 17.266661 41.159996 17.16 c
41.159996 8.32 l
41.159996 8.13334 41.073338 8.04 40.899998 8.04 c
39.759998 8.04 l
h
44.099998 17.940001 m
44.099998 18.220001 44.066658 18.483341 44 18.73 c
43.933342 18.976658 43.82 19.193319 43.66 19.37998 c
43.5 19.566641 43.286659 19.71664 43.02 19.829981 c
42.753342 19.943321 42.420002 19.999981 42.02 19.999981 c
38.66 19.999981 l
38.259998 19.999981 37.926659 19.943321 37.66 19.829981 c
37.393341 19.71664 37.18 19.566641 37.02 19.37998 c
36.860001 19.193319 36.746662 18.97666 36.68 18.73 c
36.613338 18.483339 36.580002 18.219999 36.580002 17.939999 c
36.580002 7.379998 l
36.580002 6.806658 36.73666 6.349999 37.050003 6.009998 c
37.363346 5.669998 37.860004 5.499998 38.540005 5.499998 c
42.140003 5.499998 l
42.820004 5.499998 43.316704 5.669998 43.630005 6.009998 c
43.943306 6.349999 44.100006 6.806658 44.100006 7.379998 c
44.100006 17.939999 l
44.099998 17.940001 l
h
50.299999 5.5 m
53.239998 5.5 l
50.559998 20 l
47.539997 20 l
44.859997 5.5 l
47.799995 5.5 l
48.059994 7.36 l
49.039993 14.860001 l
50.039993 7.320001 l
50.299999 5.5 l
h
55.48 18.200001 m
55.220001 20 l
52.300003 20 l
54.920002 5.5 l
58.02 5.5 l
60.639999 20 l
57.720001 20 l
57.460003 18.200001 l
55.480003 18.200001 l
55.48 18.200001 l
h
55.799999 15.9 m
57.139999 15.9 l
56.48 10.76 l
55.799999 15.9 l
h
71.440002 20 m
68.480003 20 l
68.480003 14.2 l
66.900002 14.2 l
66.900002 20 l
63.940002 20 l
63.940002 5.5 l
66.900002 5.5 l
66.900002 11.7 l
68.480003 11.7 l
68.480003 5.5 l
71.440002 5.5 l
71.440002 20 l
h
75.82 8.04 m
75.64666 8.04 75.559998 8.13334 75.559998 8.32 c
75.559998 17.16 l
75.559998 17.266661 75.57666 17.343319 75.610001 17.38998 c
75.643341 17.436642 75.720001 17.45998 75.840004 17.45998 c
76.940002 17.45998 l
77.060005 17.45998 77.136665 17.43664 77.170006 17.38998 c
77.203346 17.343321 77.220009 17.266661 77.220009 17.16 c
77.220009 8.32 l
77.220009 8.13334 77.133347 8.04 76.960007 8.04 c
75.820007 8.04 l
75.82 8.04 l
h
80.160004 17.940001 m
80.160004 18.220001 80.126663 18.483341 80.060005 18.73 c
79.993347 18.976658 79.880005 19.193319 79.720009 19.37998 c
79.560013 19.566641 79.346672 19.71664 79.080009 19.829981 c
78.813347 19.943321 78.480011 19.999981 78.080009 19.999981 c
74.720009 19.999981 l
74.320007 19.999981 73.986671 19.943321 73.720009 19.829981 c
73.453346 19.71664 73.240005 19.566641 73.080009 19.37998 c
72.920013 19.193319 72.806671 18.97666 72.740013 18.73 c
72.673355 18.483339 72.640015 18.219999 72.640015 17.939999 c
72.640015 7.379998 l
72.640015 6.806658 72.796677 6.349999 73.110016 6.009998 c
73.423355 5.669998 73.920013 5.499998 74.600014 5.499998 c
78.200012 5.499998 l
78.880013 5.499998 79.376709 5.669998 79.69001 6.009998 c
80.003311 6.349999 80.160011 6.806658 80.160011 7.379998 c
80.160011 17.939999 l
80.160004 17.940001 l
h
81.360001 5.5 m
84.340004 5.5 l
84.340004 17.299999 l
87.260002 17.299999 l
86.760002 20 l
81.360001 20 l
81.360001 5.5 l
h
88.160004 5.5 m
91.060005 5.5 l
91.060005 20 l
88.160004 20 l
88.160004 5.5 l
h
95.139999 8.04 m
95.139999 17.459999 l
96.5 17.459999 l
96.620003 17.459999 96.696663 17.436659 96.730003 17.389999 c
96.763344 17.34334 96.780006 17.26668 96.780006 17.160019 c
96.780006 8.320019 l
96.780006 8.133359 96.693344 8.040019 96.520004 8.040019 c
95.140007 8.040019 l
95.139999 8.04 l
h
99.660004 17.76 m
99.660004 18.559999 99.493347 19.133301 99.160004 19.48 c
98.82666 19.826698 98.240005 20 97.400002 20 c
92.260002 20 l
92.260002 5.5 l
97.940002 5.5 l
98.513344 5.5 98.943306 5.66 99.230003 5.98 c
99.516701 6.3 99.660004 6.72666 99.660004 7.26 c
99.660004 17.76 l
h
103.5 18.200001 m
103.239998 20 l
100.32 20 l
102.940002 5.5 l
106.040001 5.5 l
108.660004 20 l
105.740005 20 l
105.480003 18.200001 l
103.5 18.200001 l
h
103.82 15.9 m
105.159996 15.9 l
104.499992 10.76 l
103.82 15.9 l
h
113.5 20 m
110.440002 20 l
110.440002 16.32 l
107.660004 5.5 l
110.660004 5.5 l
111.960007 12.34 l
113.280006 5.5 l
116.280006 5.5 l
113.500008 16.32 l
113.500008 20 l
113.5 20 l
h
117.720001 20 m
117.200043 17.299999 l
120.320045 17.299999 l
120.546707 17.299999 120.660042 17.199999 120.660042 17 c
120.660042 14.36 l
120.660042 14.16 120.620041 14.04 120.540039 14 c
120.460037 13.96 120.320038 13.94 120.120041 13.94 c
118.620041 13.94 l
118.4067 13.94 118.203362 13.92334 118.010017 13.889999 c
117.816673 13.856659 117.643341 13.78 117.489998 13.66 c
117.336655 13.54 117.21666 13.37334 117.129997 13.16 c
117.043335 12.94666 117 12.66 117 12.3 c
117 7.38 l
117 6.80666 117.156662 6.35 117.470001 6.01 c
117.78334 5.67 118.279999 5.5 118.959999 5.5 c
122.959999 5.5 l
123.459999 8.2 l
120.18 8.2 l
119.940002 8.2 119.82 8.30666 119.82 8.52 c
119.82 11.16 l
119.82 11.30666 119.856659 11.40666 119.93 11.46 c
120.003342 11.51334 120.113342 11.54 120.260002 11.54 c
122.080002 11.54 l
122.546661 11.54 122.90332 11.65 123.150002 11.87 c
123.396683 12.09 123.520004 12.47334 123.520004 13.02 c
123.520004 17.799999 l
123.520004 18.599998 123.356667 19.166698 123.030006 19.5 c
122.703346 19.833302 122.126686 20 121.300003 20 c
117.720001 20 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
